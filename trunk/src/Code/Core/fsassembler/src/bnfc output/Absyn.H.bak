#ifndef ABSYN_HEADER
#define ABSYN_HEADER

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/
typedef int Integer;
typedef char Char;
typedef double Double;
typedef char* String;
typedef char* Ident;
typedef char* HexConstant;


/********************   Forward Declarations    ********************/

class Main;
class ListOperation;
class OAddC;
class OSubC;
class OLbl;
class OJmp;
class OJb;
class OJbe;
class OJe;
class OJne;
class OJz;
class OJnz;
class OCall;
class ORet;
class OPush;
class OPop;
class OFabs;
class OFchs;
class OFadd;
class OFaddp;
class OFsub;
class OFsubp;
class OFsubrp;
class OFmulp;
class OFdivp;
class OFdivrp;
class OFsin;
class OFcos;
class OFprem;
class OFptan;
class OFpatan;
class OFsqrt;
class OFrndint;
class OFscale;
class OFtxmo;
class OFyltx;
class OFyltxpo;
class OFcomi;
class OFcmovb;
class OFcmovbe;
class OFcmove;
class OFcmovnb;
class OFcmovnbe;
class OFcmovne;
class OFcmovnu;
class OFcmovu;
class OFld;
class OFild;
class OFldt;
class OFldn;
class OFldz;
class OFldo;
class OFldpi;
class OFldlte;
class OFldlnt;
class OFldlgt;
class OFst;
class OFist;
class OFstp;
class OFistp;
class OFstpt;
class OFfree;
class OFfreea;
class OFfreeb;
class OFfreec;
class OFfreed;
class OFfreee;
class OFfreef;
class OFfreeg;
class OFxchg;
class OFincstp;
class OFdecstp;
class REax;
class REcx;
class REdx;
class REbx;
class REsp;
class REbp;
class REsi;
class REdi;
class OReg;
class OHex;
class OLab;
class OLitAdd;
class ORegAdd;
class ORelAddP;
class ORelAddS;
class Code;
class Operation;
class Register;
class Operand;


/********************   Visitor Interfaces    ********************/

class Visitor
{
 public:
  virtual ~Visitor() {}
  virtual void visitMain(Main *p) = 0;
  virtual void visitListOperation(ListOperation *p) = 0;
  virtual void visitOAddC(OAddC *p) = 0;
  virtual void visitOSubC(OSubC *p) = 0;
  virtual void visitOLbl(OLbl *p) = 0;
  virtual void visitOJmp(OJmp *p) = 0;
  virtual void visitOJb(OJb *p) = 0;
  virtual void visitOJbe(OJbe *p) = 0;
  virtual void visitOJe(OJe *p) = 0;
  virtual void visitOJne(OJne *p) = 0;
  virtual void visitOJz(OJz *p) = 0;
  virtual void visitOJnz(OJnz *p) = 0;
  virtual void visitOCall(OCall *p) = 0;
  virtual void visitORet(ORet *p) = 0;
  virtual void visitOPush(OPush *p) = 0;
  virtual void visitOPop(OPop *p) = 0;
  virtual void visitOFabs(OFabs *p) = 0;
  virtual void visitOFchs(OFchs *p) = 0;
  virtual void visitOFadd(OFadd *p) = 0;
  virtual void visitOFaddp(OFaddp *p) = 0;
  virtual void visitOFsub(OFsub *p) = 0;
  virtual void visitOFsubp(OFsubp *p) = 0;
  virtual void visitOFsubrp(OFsubrp *p) = 0;
  virtual void visitOFmulp(OFmulp *p) = 0;
  virtual void visitOFdivp(OFdivp *p) = 0;
  virtual void visitOFdivrp(OFdivrp *p) = 0;
  virtual void visitOFsin(OFsin *p) = 0;
  virtual void visitOFcos(OFcos *p) = 0;
  virtual void visitOFprem(OFprem *p) = 0;
  virtual void visitOFptan(OFptan *p) = 0;
  virtual void visitOFpatan(OFpatan *p) = 0;
  virtual void visitOFsqrt(OFsqrt *p) = 0;
  virtual void visitOFrndint(OFrndint *p) = 0;
  virtual void visitOFscale(OFscale *p) = 0;
  virtual void visitOFtxmo(OFtxmo *p) = 0;
  virtual void visitOFyltx(OFyltx *p) = 0;
  virtual void visitOFyltxpo(OFyltxpo *p) = 0;
  virtual void visitOFcomi(OFcomi *p) = 0;
  virtual void visitOFcmovb(OFcmovb *p) = 0;
  virtual void visitOFcmovbe(OFcmovbe *p) = 0;
  virtual void visitOFcmove(OFcmove *p) = 0;
  virtual void visitOFcmovnb(OFcmovnb *p) = 0;
  virtual void visitOFcmovnbe(OFcmovnbe *p) = 0;
  virtual void visitOFcmovne(OFcmovne *p) = 0;
  virtual void visitOFcmovnu(OFcmovnu *p) = 0;
  virtual void visitOFcmovu(OFcmovu *p) = 0;
  virtual void visitOFld(OFld *p) = 0;
  virtual void visitOFild(OFild *p) = 0;
  virtual void visitOFldt(OFldt *p) = 0;
  virtual void visitOFldn(OFldn *p) = 0;
  virtual void visitOFldz(OFldz *p) = 0;
  virtual void visitOFldo(OFldo *p) = 0;
  virtual void visitOFldpi(OFldpi *p) = 0;
  virtual void visitOFldlte(OFldlte *p) = 0;
  virtual void visitOFldlnt(OFldlnt *p) = 0;
  virtual void visitOFldlgt(OFldlgt *p) = 0;
  virtual void visitOFst(OFst *p) = 0;
  virtual void visitOFist(OFist *p) = 0;
  virtual void visitOFstp(OFstp *p) = 0;
  virtual void visitOFistp(OFistp *p) = 0;
  virtual void visitOFstpt(OFstpt *p) = 0;
  virtual void visitOFfree(OFfree *p) = 0;
  virtual void visitOFfreea(OFfreea *p) = 0;
  virtual void visitOFfreeb(OFfreeb *p) = 0;
  virtual void visitOFfreec(OFfreec *p) = 0;
  virtual void visitOFfreed(OFfreed *p) = 0;
  virtual void visitOFfreee(OFfreee *p) = 0;
  virtual void visitOFfreef(OFfreef *p) = 0;
  virtual void visitOFfreeg(OFfreeg *p) = 0;
  virtual void visitOFxchg(OFxchg *p) = 0;
  virtual void visitOFincstp(OFincstp *p) = 0;
  virtual void visitOFdecstp(OFdecstp *p) = 0;
  virtual void visitREax(REax *p) = 0;
  virtual void visitREcx(REcx *p) = 0;
  virtual void visitREdx(REdx *p) = 0;
  virtual void visitREbx(REbx *p) = 0;
  virtual void visitREsp(REsp *p) = 0;
  virtual void visitREbp(REbp *p) = 0;
  virtual void visitREsi(REsi *p) = 0;
  virtual void visitREdi(REdi *p) = 0;
  virtual void visitOReg(OReg *p) = 0;
  virtual void visitOHex(OHex *p) = 0;
  virtual void visitOLab(OLab *p) = 0;
  virtual void visitOLitAdd(OLitAdd *p) = 0;
  virtual void visitORegAdd(ORegAdd *p) = 0;
  virtual void visitORelAddP(ORelAddP *p) = 0;
  virtual void visitORelAddS(ORelAddS *p) = 0;
  virtual void visitCode(Code *p) = 0;
  virtual void visitOperation(Operation *p) = 0;
  virtual void visitRegister(Register *p) = 0;
  virtual void visitOperand(Operand *p) = 0;

  virtual void visitInteger(Integer i) = 0;
  virtual void visitDouble(Double d) = 0;
  virtual void visitChar(Char c) = 0;
  virtual void visitString(String s) = 0;
};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};



/********************   Abstract Syntax Classes    ********************/

class Code : public Visitable {
public:
  virtual Code *clone() const = 0;
};

class Main : public Code
{
 public:
  ListOperation *listoperation_;

  Main(const Main &);
  Main &operator=(const Main &);
  Main(ListOperation *p1);
  ~Main();
  virtual void accept(Visitor *v);
  virtual  Main  *clone() const;
  void swap(Main &);
};


class ListOperation : public Visitable
{
 public:
  Operation *operation_;
  ListOperation *listoperation_;

  ListOperation(const ListOperation &);
  ListOperation &operator=(const ListOperation &);
  ListOperation(Operation *p1, ListOperation *p2);
  ListOperation(Operation *p);
  ~ListOperation();
  ListOperation* reverse();
  ListOperation* reverse(ListOperation *l);
  virtual void accept(Visitor *v);
  virtual ListOperation *clone() const;
  void swap(ListOperation &);
};
class Operation : public Visitable {
public:
  virtual Operation *clone() const = 0;
};

class OAddC : public Operation
{
 public:
  Register *register_;
  Integer integer_;

  OAddC(const OAddC &);
  OAddC &operator=(const OAddC &);
  OAddC(Register *p1, Integer p2);
  ~OAddC();
  virtual void accept(Visitor *v);
  virtual  OAddC  *clone() const;
  void swap(OAddC &);
};

class OSubC : public Operation
{
 public:
  Register *register_;
  Integer integer_;

  OSubC(const OSubC &);
  OSubC &operator=(const OSubC &);
  OSubC(Register *p1, Integer p2);
  ~OSubC();
  virtual void accept(Visitor *v);
  virtual  OSubC  *clone() const;
  void swap(OSubC &);
};

class OLbl : public Operation
{
 public:
  Ident ident_;

  OLbl(const OLbl &);
  OLbl &operator=(const OLbl &);
  OLbl(Ident p1);
  ~OLbl();
  virtual void accept(Visitor *v);
  virtual  OLbl  *clone() const;
  void swap(OLbl &);
};

class OJmp : public Operation
{
 public:
  Operand *operand_;

  OJmp(const OJmp &);
  OJmp &operator=(const OJmp &);
  OJmp(Operand *p1);
  ~OJmp();
  virtual void accept(Visitor *v);
  virtual  OJmp  *clone() const;
  void swap(OJmp &);
};

class OJb : public Operation
{
 public:
  Operand *operand_;

  OJb(const OJb &);
  OJb &operator=(const OJb &);
  OJb(Operand *p1);
  ~OJb();
  virtual void accept(Visitor *v);
  virtual  OJb  *clone() const;
  void swap(OJb &);
};

class OJbe : public Operation
{
 public:
  Operand *operand_;

  OJbe(const OJbe &);
  OJbe &operator=(const OJbe &);
  OJbe(Operand *p1);
  ~OJbe();
  virtual void accept(Visitor *v);
  virtual  OJbe  *clone() const;
  void swap(OJbe &);
};

class OJe : public Operation
{
 public:
  Operand *operand_;

  OJe(const OJe &);
  OJe &operator=(const OJe &);
  OJe(Operand *p1);
  ~OJe();
  virtual void accept(Visitor *v);
  virtual  OJe  *clone() const;
  void swap(OJe &);
};

class OJne : public Operation
{
 public:
  Operand *operand_;

  OJne(const OJne &);
  OJne &operator=(const OJne &);
  OJne(Operand *p1);
  ~OJne();
  virtual void accept(Visitor *v);
  virtual  OJne  *clone() const;
  void swap(OJne &);
};

class OJz : public Operation
{
 public:
  Operand *operand_;

  OJz(const OJz &);
  OJz &operator=(const OJz &);
  OJz(Operand *p1);
  ~OJz();
  virtual void accept(Visitor *v);
  virtual  OJz  *clone() const;
  void swap(OJz &);
};

class OJnz : public Operation
{
 public:
  Operand *operand_;

  OJnz(const OJnz &);
  OJnz &operator=(const OJnz &);
  OJnz(Operand *p1);
  ~OJnz();
  virtual void accept(Visitor *v);
  virtual  OJnz  *clone() const;
  void swap(OJnz &);
};

class OCall : public Operation
{
 public:
  Operand *operand_;

  OCall(const OCall &);
  OCall &operator=(const OCall &);
  OCall(Operand *p1);
  ~OCall();
  virtual void accept(Visitor *v);
  virtual  OCall  *clone() const;
  void swap(OCall &);
};

class ORet : public Operation
{
 public:

  ORet(const ORet &);
  ORet &operator=(const ORet &);
  ORet();
  ~ORet();
  virtual void accept(Visitor *v);
  virtual  ORet  *clone() const;
  void swap(ORet &);
};

class OPush : public Operation
{
 public:
  Operand *operand_;

  OPush(const OPush &);
  OPush &operator=(const OPush &);
  OPush(Operand *p1);
  ~OPush();
  virtual void accept(Visitor *v);
  virtual  OPush  *clone() const;
  void swap(OPush &);
};

class OPop : public Operation
{
 public:
  Operand *operand_;

  OPop(const OPop &);
  OPop &operator=(const OPop &);
  OPop(Operand *p1);
  ~OPop();
  virtual void accept(Visitor *v);
  virtual  OPop  *clone() const;
  void swap(OPop &);
};

class OFabs : public Operation
{
 public:

  OFabs(const OFabs &);
  OFabs &operator=(const OFabs &);
  OFabs();
  ~OFabs();
  virtual void accept(Visitor *v);
  virtual  OFabs  *clone() const;
  void swap(OFabs &);
};

class OFchs : public Operation
{
 public:

  OFchs(const OFchs &);
  OFchs &operator=(const OFchs &);
  OFchs();
  ~OFchs();
  virtual void accept(Visitor *v);
  virtual  OFchs  *clone() const;
  void swap(OFchs &);
};

class OFadd : public Operation
{
 public:

  OFadd(const OFadd &);
  OFadd &operator=(const OFadd &);
  OFadd();
  ~OFadd();
  virtual void accept(Visitor *v);
  virtual  OFadd  *clone() const;
  void swap(OFadd &);
};

class OFaddp : public Operation
{
 public:

  OFaddp(const OFaddp &);
  OFaddp &operator=(const OFaddp &);
  OFaddp();
  ~OFaddp();
  virtual void accept(Visitor *v);
  virtual  OFaddp  *clone() const;
  void swap(OFaddp &);
};

class OFsub : public Operation
{
 public:

  OFsub(const OFsub &);
  OFsub &operator=(const OFsub &);
  OFsub();
  ~OFsub();
  virtual void accept(Visitor *v);
  virtual  OFsub  *clone() const;
  void swap(OFsub &);
};

class OFsubp : public Operation
{
 public:

  OFsubp(const OFsubp &);
  OFsubp &operator=(const OFsubp &);
  OFsubp();
  ~OFsubp();
  virtual void accept(Visitor *v);
  virtual  OFsubp  *clone() const;
  void swap(OFsubp &);
};

class OFsubrp : public Operation
{
 public:

  OFsubrp(const OFsubrp &);
  OFsubrp &operator=(const OFsubrp &);
  OFsubrp();
  ~OFsubrp();
  virtual void accept(Visitor *v);
  virtual  OFsubrp  *clone() const;
  void swap(OFsubrp &);
};

class OFmulp : public Operation
{
 public:

  OFmulp(const OFmulp &);
  OFmulp &operator=(const OFmulp &);
  OFmulp();
  ~OFmulp();
  virtual void accept(Visitor *v);
  virtual  OFmulp  *clone() const;
  void swap(OFmulp &);
};

class OFdivp : public Operation
{
 public:

  OFdivp(const OFdivp &);
  OFdivp &operator=(const OFdivp &);
  OFdivp();
  ~OFdivp();
  virtual void accept(Visitor *v);
  virtual  OFdivp  *clone() const;
  void swap(OFdivp &);
};

class OFdivrp : public Operation
{
 public:

  OFdivrp(const OFdivrp &);
  OFdivrp &operator=(const OFdivrp &);
  OFdivrp();
  ~OFdivrp();
  virtual void accept(Visitor *v);
  virtual  OFdivrp  *clone() const;
  void swap(OFdivrp &);
};

class OFsin : public Operation
{
 public:

  OFsin(const OFsin &);
  OFsin &operator=(const OFsin &);
  OFsin();
  ~OFsin();
  virtual void accept(Visitor *v);
  virtual  OFsin  *clone() const;
  void swap(OFsin &);
};

class OFcos : public Operation
{
 public:

  OFcos(const OFcos &);
  OFcos &operator=(const OFcos &);
  OFcos();
  ~OFcos();
  virtual void accept(Visitor *v);
  virtual  OFcos  *clone() const;
  void swap(OFcos &);
};

class OFprem : public Operation
{
 public:

  OFprem(const OFprem &);
  OFprem &operator=(const OFprem &);
  OFprem();
  ~OFprem();
  virtual void accept(Visitor *v);
  virtual  OFprem  *clone() const;
  void swap(OFprem &);
};

class OFptan : public Operation
{
 public:

  OFptan(const OFptan &);
  OFptan &operator=(const OFptan &);
  OFptan();
  ~OFptan();
  virtual void accept(Visitor *v);
  virtual  OFptan  *clone() const;
  void swap(OFptan &);
};

class OFpatan : public Operation
{
 public:

  OFpatan(const OFpatan &);
  OFpatan &operator=(const OFpatan &);
  OFpatan();
  ~OFpatan();
  virtual void accept(Visitor *v);
  virtual  OFpatan  *clone() const;
  void swap(OFpatan &);
};

class OFsqrt : public Operation
{
 public:

  OFsqrt(const OFsqrt &);
  OFsqrt &operator=(const OFsqrt &);
  OFsqrt();
  ~OFsqrt();
  virtual void accept(Visitor *v);
  virtual  OFsqrt  *clone() const;
  void swap(OFsqrt &);
};

class OFrndint : public Operation
{
 public:

  OFrndint(const OFrndint &);
  OFrndint &operator=(const OFrndint &);
  OFrndint();
  ~OFrndint();
  virtual void accept(Visitor *v);
  virtual  OFrndint  *clone() const;
  void swap(OFrndint &);
};

class OFscale : public Operation
{
 public:

  OFscale(const OFscale &);
  OFscale &operator=(const OFscale &);
  OFscale();
  ~OFscale();
  virtual void accept(Visitor *v);
  virtual  OFscale  *clone() const;
  void swap(OFscale &);
};

class OFtxmo : public Operation
{
 public:

  OFtxmo(const OFtxmo &);
  OFtxmo &operator=(const OFtxmo &);
  OFtxmo();
  ~OFtxmo();
  virtual void accept(Visitor *v);
  virtual  OFtxmo  *clone() const;
  void swap(OFtxmo &);
};

class OFyltx : public Operation
{
 public:

  OFyltx(const OFyltx &);
  OFyltx &operator=(const OFyltx &);
  OFyltx();
  ~OFyltx();
  virtual void accept(Visitor *v);
  virtual  OFyltx  *clone() const;
  void swap(OFyltx &);
};

class OFyltxpo : public Operation
{
 public:

  OFyltxpo(const OFyltxpo &);
  OFyltxpo &operator=(const OFyltxpo &);
  OFyltxpo();
  ~OFyltxpo();
  virtual void accept(Visitor *v);
  virtual  OFyltxpo  *clone() const;
  void swap(OFyltxpo &);
};

class OFcomi : public Operation
{
 public:

  OFcomi(const OFcomi &);
  OFcomi &operator=(const OFcomi &);
  OFcomi();
  ~OFcomi();
  virtual void accept(Visitor *v);
  virtual  OFcomi  *clone() const;
  void swap(OFcomi &);
};

class OFcmovb : public Operation
{
 public:

  OFcmovb(const OFcmovb &);
  OFcmovb &operator=(const OFcmovb &);
  OFcmovb();
  ~OFcmovb();
  virtual void accept(Visitor *v);
  virtual  OFcmovb  *clone() const;
  void swap(OFcmovb &);
};

class OFcmovbe : public Operation
{
 public:

  OFcmovbe(const OFcmovbe &);
  OFcmovbe &operator=(const OFcmovbe &);
  OFcmovbe();
  ~OFcmovbe();
  virtual void accept(Visitor *v);
  virtual  OFcmovbe  *clone() const;
  void swap(OFcmovbe &);
};

class OFcmove : public Operation
{
 public:

  OFcmove(const OFcmove &);
  OFcmove &operator=(const OFcmove &);
  OFcmove();
  ~OFcmove();
  virtual void accept(Visitor *v);
  virtual  OFcmove  *clone() const;
  void swap(OFcmove &);
};

class OFcmovnb : public Operation
{
 public:

  OFcmovnb(const OFcmovnb &);
  OFcmovnb &operator=(const OFcmovnb &);
  OFcmovnb();
  ~OFcmovnb();
  virtual void accept(Visitor *v);
  virtual  OFcmovnb  *clone() const;
  void swap(OFcmovnb &);
};

class OFcmovnbe : public Operation
{
 public:

  OFcmovnbe(const OFcmovnbe &);
  OFcmovnbe &operator=(const OFcmovnbe &);
  OFcmovnbe();
  ~OFcmovnbe();
  virtual void accept(Visitor *v);
  virtual  OFcmovnbe  *clone() const;
  void swap(OFcmovnbe &);
};

class OFcmovne : public Operation
{
 public:

  OFcmovne(const OFcmovne &);
  OFcmovne &operator=(const OFcmovne &);
  OFcmovne();
  ~OFcmovne();
  virtual void accept(Visitor *v);
  virtual  OFcmovne  *clone() const;
  void swap(OFcmovne &);
};

class OFcmovnu : public Operation
{
 public:

  OFcmovnu(const OFcmovnu &);
  OFcmovnu &operator=(const OFcmovnu &);
  OFcmovnu();
  ~OFcmovnu();
  virtual void accept(Visitor *v);
  virtual  OFcmovnu  *clone() const;
  void swap(OFcmovnu &);
};

class OFcmovu : public Operation
{
 public:

  OFcmovu(const OFcmovu &);
  OFcmovu &operator=(const OFcmovu &);
  OFcmovu();
  ~OFcmovu();
  virtual void accept(Visitor *v);
  virtual  OFcmovu  *clone() const;
  void swap(OFcmovu &);
};

class OFld : public Operation
{
 public:
  Operand *operand_;

  OFld(const OFld &);
  OFld &operator=(const OFld &);
  OFld(Operand *p1);
  ~OFld();
  virtual void accept(Visitor *v);
  virtual  OFld  *clone() const;
  void swap(OFld &);
};

class OFild : public Operation
{
 public:
  Operand *operand_;

  OFild(const OFild &);
  OFild &operator=(const OFild &);
  OFild(Operand *p1);
  ~OFild();
  virtual void accept(Visitor *v);
  virtual  OFild  *clone() const;
  void swap(OFild &);
};

class OFldt : public Operation
{
 public:

  OFldt(const OFldt &);
  OFldt &operator=(const OFldt &);
  OFldt();
  ~OFldt();
  virtual void accept(Visitor *v);
  virtual  OFldt  *clone() const;
  void swap(OFldt &);
};

class OFldn : public Operation
{
 public:

  OFldn(const OFldn &);
  OFldn &operator=(const OFldn &);
  OFldn();
  ~OFldn();
  virtual void accept(Visitor *v);
  virtual  OFldn  *clone() const;
  void swap(OFldn &);
};

class OFldz : public Operation
{
 public:

  OFldz(const OFldz &);
  OFldz &operator=(const OFldz &);
  OFldz();
  ~OFldz();
  virtual void accept(Visitor *v);
  virtual  OFldz  *clone() const;
  void swap(OFldz &);
};

class OFldo : public Operation
{
 public:

  OFldo(const OFldo &);
  OFldo &operator=(const OFldo &);
  OFldo();
  ~OFldo();
  virtual void accept(Visitor *v);
  virtual  OFldo  *clone() const;
  void swap(OFldo &);
};

class OFldpi : public Operation
{
 public:

  OFldpi(const OFldpi &);
  OFldpi &operator=(const OFldpi &);
  OFldpi();
  ~OFldpi();
  virtual void accept(Visitor *v);
  virtual  OFldpi  *clone() const;
  void swap(OFldpi &);
};

class OFldlte : public Operation
{
 public:

  OFldlte(const OFldlte &);
  OFldlte &operator=(const OFldlte &);
  OFldlte();
  ~OFldlte();
  virtual void accept(Visitor *v);
  virtual  OFldlte  *clone() const;
  void swap(OFldlte &);
};

class OFldlnt : public Operation
{
 public:

  OFldlnt(const OFldlnt &);
  OFldlnt &operator=(const OFldlnt &);
  OFldlnt();
  ~OFldlnt();
  virtual void accept(Visitor *v);
  virtual  OFldlnt  *clone() const;
  void swap(OFldlnt &);
};

class OFldlgt : public Operation
{
 public:

  OFldlgt(const OFldlgt &);
  OFldlgt &operator=(const OFldlgt &);
  OFldlgt();
  ~OFldlgt();
  virtual void accept(Visitor *v);
  virtual  OFldlgt  *clone() const;
  void swap(OFldlgt &);
};

class OFst : public Operation
{
 public:
  Operand *operand_;

  OFst(const OFst &);
  OFst &operator=(const OFst &);
  OFst(Operand *p1);
  ~OFst();
  virtual void accept(Visitor *v);
  virtual  OFst  *clone() const;
  void swap(OFst &);
};

class OFist : public Operation
{
 public:
  Operand *operand_;

  OFist(const OFist &);
  OFist &operator=(const OFist &);
  OFist(Operand *p1);
  ~OFist();
  virtual void accept(Visitor *v);
  virtual  OFist  *clone() const;
  void swap(OFist &);
};

class OFstp : public Operation
{
 public:
  Operand *operand_;

  OFstp(const OFstp &);
  OFstp &operator=(const OFstp &);
  OFstp(Operand *p1);
  ~OFstp();
  virtual void accept(Visitor *v);
  virtual  OFstp  *clone() const;
  void swap(OFstp &);
};

class OFistp : public Operation
{
 public:
  Operand *operand_;

  OFistp(const OFistp &);
  OFistp &operator=(const OFistp &);
  OFistp(Operand *p1);
  ~OFistp();
  virtual void accept(Visitor *v);
  virtual  OFistp  *clone() const;
  void swap(OFistp &);
};

class OFstpt : public Operation
{
 public:

  OFstpt(const OFstpt &);
  OFstpt &operator=(const OFstpt &);
  OFstpt();
  ~OFstpt();
  virtual void accept(Visitor *v);
  virtual  OFstpt  *clone() const;
  void swap(OFstpt &);
};

class OFfree : public Operation
{
 public:

  OFfree(const OFfree &);
  OFfree &operator=(const OFfree &);
  OFfree();
  ~OFfree();
  virtual void accept(Visitor *v);
  virtual  OFfree  *clone() const;
  void swap(OFfree &);
};

class OFfreea : public Operation
{
 public:

  OFfreea(const OFfreea &);
  OFfreea &operator=(const OFfreea &);
  OFfreea();
  ~OFfreea();
  virtual void accept(Visitor *v);
  virtual  OFfreea  *clone() const;
  void swap(OFfreea &);
};

class OFfreeb : public Operation
{
 public:

  OFfreeb(const OFfreeb &);
  OFfreeb &operator=(const OFfreeb &);
  OFfreeb();
  ~OFfreeb();
  virtual void accept(Visitor *v);
  virtual  OFfreeb  *clone() const;
  void swap(OFfreeb &);
};

class OFfreec : public Operation
{
 public:

  OFfreec(const OFfreec &);
  OFfreec &operator=(const OFfreec &);
  OFfreec();
  ~OFfreec();
  virtual void accept(Visitor *v);
  virtual  OFfreec  *clone() const;
  void swap(OFfreec &);
};

class OFfreed : public Operation
{
 public:

  OFfreed(const OFfreed &);
  OFfreed &operator=(const OFfreed &);
  OFfreed();
  ~OFfreed();
  virtual void accept(Visitor *v);
  virtual  OFfreed  *clone() const;
  void swap(OFfreed &);
};

class OFfreee : public Operation
{
 public:

  OFfreee(const OFfreee &);
  OFfreee &operator=(const OFfreee &);
  OFfreee();
  ~OFfreee();
  virtual void accept(Visitor *v);
  virtual  OFfreee  *clone() const;
  void swap(OFfreee &);
};

class OFfreef : public Operation
{
 public:

  OFfreef(const OFfreef &);
  OFfreef &operator=(const OFfreef &);
  OFfreef();
  ~OFfreef();
  virtual void accept(Visitor *v);
  virtual  OFfreef  *clone() const;
  void swap(OFfreef &);
};

class OFfreeg : public Operation
{
 public:

  OFfreeg(const OFfreeg &);
  OFfreeg &operator=(const OFfreeg &);
  OFfreeg();
  ~OFfreeg();
  virtual void accept(Visitor *v);
  virtual  OFfreeg  *clone() const;
  void swap(OFfreeg &);
};

class OFxchg : public Operation
{
 public:

  OFxchg(const OFxchg &);
  OFxchg &operator=(const OFxchg &);
  OFxchg();
  ~OFxchg();
  virtual void accept(Visitor *v);
  virtual  OFxchg  *clone() const;
  void swap(OFxchg &);
};

class OFincstp : public Operation
{
 public:

  OFincstp(const OFincstp &);
  OFincstp &operator=(const OFincstp &);
  OFincstp();
  ~OFincstp();
  virtual void accept(Visitor *v);
  virtual  OFincstp  *clone() const;
  void swap(OFincstp &);
};

class OFdecstp : public Operation
{
 public:

  OFdecstp(const OFdecstp &);
  OFdecstp &operator=(const OFdecstp &);
  OFdecstp();
  ~OFdecstp();
  virtual void accept(Visitor *v);
  virtual  OFdecstp  *clone() const;
  void swap(OFdecstp &);
};


class Register : public Visitable {
public:
  virtual Register *clone() const = 0;
};

class REax : public Register
{
 public:

  REax(const REax &);
  REax &operator=(const REax &);
  REax();
  ~REax();
  virtual void accept(Visitor *v);
  virtual  REax  *clone() const;
  void swap(REax &);
};

class REcx : public Register
{
 public:

  REcx(const REcx &);
  REcx &operator=(const REcx &);
  REcx();
  ~REcx();
  virtual void accept(Visitor *v);
  virtual  REcx  *clone() const;
  void swap(REcx &);
};

class REdx : public Register
{
 public:

  REdx(const REdx &);
  REdx &operator=(const REdx &);
  REdx();
  ~REdx();
  virtual void accept(Visitor *v);
  virtual  REdx  *clone() const;
  void swap(REdx &);
};

class REbx : public Register
{
 public:

  REbx(const REbx &);
  REbx &operator=(const REbx &);
  REbx();
  ~REbx();
  virtual void accept(Visitor *v);
  virtual  REbx  *clone() const;
  void swap(REbx &);
};

class REsp : public Register
{
 public:

  REsp(const REsp &);
  REsp &operator=(const REsp &);
  REsp();
  ~REsp();
  virtual void accept(Visitor *v);
  virtual  REsp  *clone() const;
  void swap(REsp &);
};

class REbp : public Register
{
 public:

  REbp(const REbp &);
  REbp &operator=(const REbp &);
  REbp();
  ~REbp();
  virtual void accept(Visitor *v);
  virtual  REbp  *clone() const;
  void swap(REbp &);
};

class REsi : public Register
{
 public:

  REsi(const REsi &);
  REsi &operator=(const REsi &);
  REsi();
  ~REsi();
  virtual void accept(Visitor *v);
  virtual  REsi  *clone() const;
  void swap(REsi &);
};

class REdi : public Register
{
 public:

  REdi(const REdi &);
  REdi &operator=(const REdi &);
  REdi();
  ~REdi();
  virtual void accept(Visitor *v);
  virtual  REdi  *clone() const;
  void swap(REdi &);
};


class Operand : public Visitable {
public:
  virtual Operand *clone() const = 0;
};

class OReg : public Operand
{
 public:
  Register *register_;

  OReg(const OReg &);
  OReg &operator=(const OReg &);
  OReg(Register *p1);
  ~OReg();
  virtual void accept(Visitor *v);
  virtual  OReg  *clone() const;
  void swap(OReg &);
};

class OHex : public Operand
{
 public:
  HexConstant hexconstant_;

  OHex(const OHex &);
  OHex &operator=(const OHex &);
  OHex(HexConstant p1);
  ~OHex();
  virtual void accept(Visitor *v);
  virtual  OHex  *clone() const;
  void swap(OHex &);
};

class OLab : public Operand
{
 public:
  Ident ident_;

  OLab(const OLab &);
  OLab &operator=(const OLab &);
  OLab(Ident p1);
  ~OLab();
  virtual void accept(Visitor *v);
  virtual  OLab  *clone() const;
  void swap(OLab &);
};

class OLitAdd : public Operand
{
 public:
  HexConstant hexconstant_;

  OLitAdd(const OLitAdd &);
  OLitAdd &operator=(const OLitAdd &);
  OLitAdd(HexConstant p1);
  ~OLitAdd();
  virtual void accept(Visitor *v);
  virtual  OLitAdd  *clone() const;
  void swap(OLitAdd &);
};

class ORegAdd : public Operand
{
 public:
  Register *register_;

  ORegAdd(const ORegAdd &);
  ORegAdd &operator=(const ORegAdd &);
  ORegAdd(Register *p1);
  ~ORegAdd();
  virtual void accept(Visitor *v);
  virtual  ORegAdd  *clone() const;
  void swap(ORegAdd &);
};

class ORelAddP : public Operand
{
 public:
  Register *register_;
  Integer integer_;

  ORelAddP(const ORelAddP &);
  ORelAddP &operator=(const ORelAddP &);
  ORelAddP(Register *p1, Integer p2);
  ~ORelAddP();
  virtual void accept(Visitor *v);
  virtual  ORelAddP  *clone() const;
  void swap(ORelAddP &);
};

class ORelAddS : public Operand
{
 public:
  Register *register_;
  Integer integer_;

  ORelAddS(const ORelAddS &);
  ORelAddS &operator=(const ORelAddS &);
  ORelAddS(Register *p1, Integer p2);
  ~ORelAddS();
  virtual void accept(Visitor *v);
  virtual  ORelAddS  *clone() const;
  void swap(ORelAddS &);
};




#endif
