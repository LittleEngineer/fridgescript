//C++ Abstract Syntax Implementation generated by the BNF Converter.
#include <algorithm>
#include "Absyn.H"

/********************   Main    ********************/
Main::Main(ListOperation *p1) { listoperation_ = p1; }
Main::Main(const Main & other) {   listoperation_ = other.listoperation_->clone();

}
Main &Main::operator=(const Main & other) {
  Main tmp(other);
  swap(tmp);
  return *this;
}
void Main::swap(Main & other) {
  std::swap(listoperation_, other.listoperation_);

}

Main::~Main() { delete(listoperation_); }

void Main::accept(Visitor *v) { v->visitMain(this); }
Main *Main::clone() const {
  return new Main(*this);
}

/********************   ListOperation    ********************/
ListOperation::ListOperation(Operation *p1, ListOperation *p2) { operation_ = p1; listoperation_ = p2; }
ListOperation::ListOperation(const ListOperation & other) {   operation_ = other.operation_->clone();
  listoperation_ = other.listoperation_->clone();

}
ListOperation &ListOperation::operator=(const ListOperation & other) {
  ListOperation tmp(other);
  swap(tmp);
  return *this;
}
void ListOperation::swap(ListOperation & other) {
  std::swap(operation_, other.operation_);
  std::swap(listoperation_, other.listoperation_);

}

ListOperation::~ListOperation() { delete(operation_); delete(listoperation_); }
ListOperation::ListOperation(Operation *p)
{
  operation_ = p;
  listoperation_= 0;
}
ListOperation* ListOperation::reverse()
{
  if (listoperation_ == 0) return this;
  else
  {
    ListOperation *tmp = listoperation_->reverse(this);
    listoperation_ = 0;
    return tmp;
  }
}

ListOperation* ListOperation::reverse(ListOperation* prev)
{
  if (listoperation_ == 0)
  {
    listoperation_ = prev;
    return this;
  }
  else
  {
    ListOperation *tmp = listoperation_->reverse(this);
    listoperation_ = prev;
    return tmp;
  }
}


void ListOperation::accept(Visitor *v) { v->visitListOperation(this); }
ListOperation *ListOperation::clone() const {
  return new ListOperation(*this);
}

/********************   OAddC    ********************/
OAddC::OAddC(Register *p1, Integer p2) { register_ = p1; integer_ = p2; }
OAddC::OAddC(const OAddC & other) {   register_ = other.register_->clone();
  integer_ = other.integer_;

}
OAddC &OAddC::operator=(const OAddC & other) {
  OAddC tmp(other);
  swap(tmp);
  return *this;
}
void OAddC::swap(OAddC & other) {
  std::swap(register_, other.register_);
  std::swap(integer_, other.integer_);

}

OAddC::~OAddC() { delete(register_); }

void OAddC::accept(Visitor *v) { v->visitOAddC(this); }
OAddC *OAddC::clone() const {
  return new OAddC(*this);
}

/********************   OSubC    ********************/
OSubC::OSubC(Register *p1, Integer p2) { register_ = p1; integer_ = p2; }
OSubC::OSubC(const OSubC & other) {   register_ = other.register_->clone();
  integer_ = other.integer_;

}
OSubC &OSubC::operator=(const OSubC & other) {
  OSubC tmp(other);
  swap(tmp);
  return *this;
}
void OSubC::swap(OSubC & other) {
  std::swap(register_, other.register_);
  std::swap(integer_, other.integer_);

}

OSubC::~OSubC() { delete(register_); }

void OSubC::accept(Visitor *v) { v->visitOSubC(this); }
OSubC *OSubC::clone() const {
  return new OSubC(*this);
}

/********************   OLbl    ********************/
OLbl::OLbl(Ident p1) { ident_ = p1; }
OLbl::OLbl(const OLbl & other) {   ident_ = other.ident_;

}
OLbl &OLbl::operator=(const OLbl & other) {
  OLbl tmp(other);
  swap(tmp);
  return *this;
}
void OLbl::swap(OLbl & other) {
  std::swap(ident_, other.ident_);

}

OLbl::~OLbl() { }

void OLbl::accept(Visitor *v) { v->visitOLbl(this); }
OLbl *OLbl::clone() const {
  return new OLbl(*this);
}

/********************   OJmp    ********************/
OJmp::OJmp(Operand *p1) { operand_ = p1; }
OJmp::OJmp(const OJmp & other) {   operand_ = other.operand_->clone();

}
OJmp &OJmp::operator=(const OJmp & other) {
  OJmp tmp(other);
  swap(tmp);
  return *this;
}
void OJmp::swap(OJmp & other) {
  std::swap(operand_, other.operand_);

}

OJmp::~OJmp() { delete(operand_); }

void OJmp::accept(Visitor *v) { v->visitOJmp(this); }
OJmp *OJmp::clone() const {
  return new OJmp(*this);
}

/********************   OJb    ********************/
OJb::OJb(Operand *p1) { operand_ = p1; }
OJb::OJb(const OJb & other) {   operand_ = other.operand_->clone();

}
OJb &OJb::operator=(const OJb & other) {
  OJb tmp(other);
  swap(tmp);
  return *this;
}
void OJb::swap(OJb & other) {
  std::swap(operand_, other.operand_);

}

OJb::~OJb() { delete(operand_); }

void OJb::accept(Visitor *v) { v->visitOJb(this); }
OJb *OJb::clone() const {
  return new OJb(*this);
}

/********************   OJbe    ********************/
OJbe::OJbe(Operand *p1) { operand_ = p1; }
OJbe::OJbe(const OJbe & other) {   operand_ = other.operand_->clone();

}
OJbe &OJbe::operator=(const OJbe & other) {
  OJbe tmp(other);
  swap(tmp);
  return *this;
}
void OJbe::swap(OJbe & other) {
  std::swap(operand_, other.operand_);

}

OJbe::~OJbe() { delete(operand_); }

void OJbe::accept(Visitor *v) { v->visitOJbe(this); }
OJbe *OJbe::clone() const {
  return new OJbe(*this);
}

/********************   OJe    ********************/
OJe::OJe(Operand *p1) { operand_ = p1; }
OJe::OJe(const OJe & other) {   operand_ = other.operand_->clone();

}
OJe &OJe::operator=(const OJe & other) {
  OJe tmp(other);
  swap(tmp);
  return *this;
}
void OJe::swap(OJe & other) {
  std::swap(operand_, other.operand_);

}

OJe::~OJe() { delete(operand_); }

void OJe::accept(Visitor *v) { v->visitOJe(this); }
OJe *OJe::clone() const {
  return new OJe(*this);
}

/********************   OJne    ********************/
OJne::OJne(Operand *p1) { operand_ = p1; }
OJne::OJne(const OJne & other) {   operand_ = other.operand_->clone();

}
OJne &OJne::operator=(const OJne & other) {
  OJne tmp(other);
  swap(tmp);
  return *this;
}
void OJne::swap(OJne & other) {
  std::swap(operand_, other.operand_);

}

OJne::~OJne() { delete(operand_); }

void OJne::accept(Visitor *v) { v->visitOJne(this); }
OJne *OJne::clone() const {
  return new OJne(*this);
}

/********************   OJz    ********************/
OJz::OJz(Operand *p1) { operand_ = p1; }
OJz::OJz(const OJz & other) {   operand_ = other.operand_->clone();

}
OJz &OJz::operator=(const OJz & other) {
  OJz tmp(other);
  swap(tmp);
  return *this;
}
void OJz::swap(OJz & other) {
  std::swap(operand_, other.operand_);

}

OJz::~OJz() { delete(operand_); }

void OJz::accept(Visitor *v) { v->visitOJz(this); }
OJz *OJz::clone() const {
  return new OJz(*this);
}

/********************   OJnz    ********************/
OJnz::OJnz(Operand *p1) { operand_ = p1; }
OJnz::OJnz(const OJnz & other) {   operand_ = other.operand_->clone();

}
OJnz &OJnz::operator=(const OJnz & other) {
  OJnz tmp(other);
  swap(tmp);
  return *this;
}
void OJnz::swap(OJnz & other) {
  std::swap(operand_, other.operand_);

}

OJnz::~OJnz() { delete(operand_); }

void OJnz::accept(Visitor *v) { v->visitOJnz(this); }
OJnz *OJnz::clone() const {
  return new OJnz(*this);
}

/********************   OCall    ********************/
OCall::OCall(Operand *p1) { operand_ = p1; }
OCall::OCall(const OCall & other) {   operand_ = other.operand_->clone();

}
OCall &OCall::operator=(const OCall & other) {
  OCall tmp(other);
  swap(tmp);
  return *this;
}
void OCall::swap(OCall & other) {
  std::swap(operand_, other.operand_);

}

OCall::~OCall() { delete(operand_); }

void OCall::accept(Visitor *v) { v->visitOCall(this); }
OCall *OCall::clone() const {
  return new OCall(*this);
}

/********************   ORet    ********************/
ORet::ORet() { }
ORet::ORet(const ORet & other) { 
}
ORet &ORet::operator=(const ORet & other) {
  ORet tmp(other);
  swap(tmp);
  return *this;
}
void ORet::swap(ORet & other) {

}

ORet::~ORet() { }

void ORet::accept(Visitor *v) { v->visitORet(this); }
ORet *ORet::clone() const {
  return new ORet(*this);
}

/********************   OPush    ********************/
OPush::OPush(Operand *p1) { operand_ = p1; }
OPush::OPush(const OPush & other) {   operand_ = other.operand_->clone();

}
OPush &OPush::operator=(const OPush & other) {
  OPush tmp(other);
  swap(tmp);
  return *this;
}
void OPush::swap(OPush & other) {
  std::swap(operand_, other.operand_);

}

OPush::~OPush() { delete(operand_); }

void OPush::accept(Visitor *v) { v->visitOPush(this); }
OPush *OPush::clone() const {
  return new OPush(*this);
}

/********************   OPop    ********************/
OPop::OPop(Operand *p1) { operand_ = p1; }
OPop::OPop(const OPop & other) {   operand_ = other.operand_->clone();

}
OPop &OPop::operator=(const OPop & other) {
  OPop tmp(other);
  swap(tmp);
  return *this;
}
void OPop::swap(OPop & other) {
  std::swap(operand_, other.operand_);

}

OPop::~OPop() { delete(operand_); }

void OPop::accept(Visitor *v) { v->visitOPop(this); }
OPop *OPop::clone() const {
  return new OPop(*this);
}

/********************   OFabs    ********************/
OFabs::OFabs() { }
OFabs::OFabs(const OFabs & other) { 
}
OFabs &OFabs::operator=(const OFabs & other) {
  OFabs tmp(other);
  swap(tmp);
  return *this;
}
void OFabs::swap(OFabs & other) {

}

OFabs::~OFabs() { }

void OFabs::accept(Visitor *v) { v->visitOFabs(this); }
OFabs *OFabs::clone() const {
  return new OFabs(*this);
}

/********************   OFchs    ********************/
OFchs::OFchs() { }
OFchs::OFchs(const OFchs & other) { 
}
OFchs &OFchs::operator=(const OFchs & other) {
  OFchs tmp(other);
  swap(tmp);
  return *this;
}
void OFchs::swap(OFchs & other) {

}

OFchs::~OFchs() { }

void OFchs::accept(Visitor *v) { v->visitOFchs(this); }
OFchs *OFchs::clone() const {
  return new OFchs(*this);
}

/********************   OFadd    ********************/
OFadd::OFadd() { }
OFadd::OFadd(const OFadd & other) { 
}
OFadd &OFadd::operator=(const OFadd & other) {
  OFadd tmp(other);
  swap(tmp);
  return *this;
}
void OFadd::swap(OFadd & other) {

}

OFadd::~OFadd() { }

void OFadd::accept(Visitor *v) { v->visitOFadd(this); }
OFadd *OFadd::clone() const {
  return new OFadd(*this);
}

/********************   OFaddp    ********************/
OFaddp::OFaddp() { }
OFaddp::OFaddp(const OFaddp & other) { 
}
OFaddp &OFaddp::operator=(const OFaddp & other) {
  OFaddp tmp(other);
  swap(tmp);
  return *this;
}
void OFaddp::swap(OFaddp & other) {

}

OFaddp::~OFaddp() { }

void OFaddp::accept(Visitor *v) { v->visitOFaddp(this); }
OFaddp *OFaddp::clone() const {
  return new OFaddp(*this);
}

/********************   OFsub    ********************/
OFsub::OFsub() { }
OFsub::OFsub(const OFsub & other) { 
}
OFsub &OFsub::operator=(const OFsub & other) {
  OFsub tmp(other);
  swap(tmp);
  return *this;
}
void OFsub::swap(OFsub & other) {

}

OFsub::~OFsub() { }

void OFsub::accept(Visitor *v) { v->visitOFsub(this); }
OFsub *OFsub::clone() const {
  return new OFsub(*this);
}

/********************   OFsubp    ********************/
OFsubp::OFsubp() { }
OFsubp::OFsubp(const OFsubp & other) { 
}
OFsubp &OFsubp::operator=(const OFsubp & other) {
  OFsubp tmp(other);
  swap(tmp);
  return *this;
}
void OFsubp::swap(OFsubp & other) {

}

OFsubp::~OFsubp() { }

void OFsubp::accept(Visitor *v) { v->visitOFsubp(this); }
OFsubp *OFsubp::clone() const {
  return new OFsubp(*this);
}

/********************   OFsubrp    ********************/
OFsubrp::OFsubrp() { }
OFsubrp::OFsubrp(const OFsubrp & other) { 
}
OFsubrp &OFsubrp::operator=(const OFsubrp & other) {
  OFsubrp tmp(other);
  swap(tmp);
  return *this;
}
void OFsubrp::swap(OFsubrp & other) {

}

OFsubrp::~OFsubrp() { }

void OFsubrp::accept(Visitor *v) { v->visitOFsubrp(this); }
OFsubrp *OFsubrp::clone() const {
  return new OFsubrp(*this);
}

/********************   OFmulp    ********************/
OFmulp::OFmulp() { }
OFmulp::OFmulp(const OFmulp & other) { 
}
OFmulp &OFmulp::operator=(const OFmulp & other) {
  OFmulp tmp(other);
  swap(tmp);
  return *this;
}
void OFmulp::swap(OFmulp & other) {

}

OFmulp::~OFmulp() { }

void OFmulp::accept(Visitor *v) { v->visitOFmulp(this); }
OFmulp *OFmulp::clone() const {
  return new OFmulp(*this);
}

/********************   OFdivp    ********************/
OFdivp::OFdivp() { }
OFdivp::OFdivp(const OFdivp & other) { 
}
OFdivp &OFdivp::operator=(const OFdivp & other) {
  OFdivp tmp(other);
  swap(tmp);
  return *this;
}
void OFdivp::swap(OFdivp & other) {

}

OFdivp::~OFdivp() { }

void OFdivp::accept(Visitor *v) { v->visitOFdivp(this); }
OFdivp *OFdivp::clone() const {
  return new OFdivp(*this);
}

/********************   OFdivrp    ********************/
OFdivrp::OFdivrp() { }
OFdivrp::OFdivrp(const OFdivrp & other) { 
}
OFdivrp &OFdivrp::operator=(const OFdivrp & other) {
  OFdivrp tmp(other);
  swap(tmp);
  return *this;
}
void OFdivrp::swap(OFdivrp & other) {

}

OFdivrp::~OFdivrp() { }

void OFdivrp::accept(Visitor *v) { v->visitOFdivrp(this); }
OFdivrp *OFdivrp::clone() const {
  return new OFdivrp(*this);
}

/********************   OFsin    ********************/
OFsin::OFsin() { }
OFsin::OFsin(const OFsin & other) { 
}
OFsin &OFsin::operator=(const OFsin & other) {
  OFsin tmp(other);
  swap(tmp);
  return *this;
}
void OFsin::swap(OFsin & other) {

}

OFsin::~OFsin() { }

void OFsin::accept(Visitor *v) { v->visitOFsin(this); }
OFsin *OFsin::clone() const {
  return new OFsin(*this);
}

/********************   OFcos    ********************/
OFcos::OFcos() { }
OFcos::OFcos(const OFcos & other) { 
}
OFcos &OFcos::operator=(const OFcos & other) {
  OFcos tmp(other);
  swap(tmp);
  return *this;
}
void OFcos::swap(OFcos & other) {

}

OFcos::~OFcos() { }

void OFcos::accept(Visitor *v) { v->visitOFcos(this); }
OFcos *OFcos::clone() const {
  return new OFcos(*this);
}

/********************   OFprem    ********************/
OFprem::OFprem() { }
OFprem::OFprem(const OFprem & other) { 
}
OFprem &OFprem::operator=(const OFprem & other) {
  OFprem tmp(other);
  swap(tmp);
  return *this;
}
void OFprem::swap(OFprem & other) {

}

OFprem::~OFprem() { }

void OFprem::accept(Visitor *v) { v->visitOFprem(this); }
OFprem *OFprem::clone() const {
  return new OFprem(*this);
}

/********************   OFptan    ********************/
OFptan::OFptan() { }
OFptan::OFptan(const OFptan & other) { 
}
OFptan &OFptan::operator=(const OFptan & other) {
  OFptan tmp(other);
  swap(tmp);
  return *this;
}
void OFptan::swap(OFptan & other) {

}

OFptan::~OFptan() { }

void OFptan::accept(Visitor *v) { v->visitOFptan(this); }
OFptan *OFptan::clone() const {
  return new OFptan(*this);
}

/********************   OFpatan    ********************/
OFpatan::OFpatan() { }
OFpatan::OFpatan(const OFpatan & other) { 
}
OFpatan &OFpatan::operator=(const OFpatan & other) {
  OFpatan tmp(other);
  swap(tmp);
  return *this;
}
void OFpatan::swap(OFpatan & other) {

}

OFpatan::~OFpatan() { }

void OFpatan::accept(Visitor *v) { v->visitOFpatan(this); }
OFpatan *OFpatan::clone() const {
  return new OFpatan(*this);
}

/********************   OFsqrt    ********************/
OFsqrt::OFsqrt() { }
OFsqrt::OFsqrt(const OFsqrt & other) { 
}
OFsqrt &OFsqrt::operator=(const OFsqrt & other) {
  OFsqrt tmp(other);
  swap(tmp);
  return *this;
}
void OFsqrt::swap(OFsqrt & other) {

}

OFsqrt::~OFsqrt() { }

void OFsqrt::accept(Visitor *v) { v->visitOFsqrt(this); }
OFsqrt *OFsqrt::clone() const {
  return new OFsqrt(*this);
}

/********************   OFrndint    ********************/
OFrndint::OFrndint() { }
OFrndint::OFrndint(const OFrndint & other) { 
}
OFrndint &OFrndint::operator=(const OFrndint & other) {
  OFrndint tmp(other);
  swap(tmp);
  return *this;
}
void OFrndint::swap(OFrndint & other) {

}

OFrndint::~OFrndint() { }

void OFrndint::accept(Visitor *v) { v->visitOFrndint(this); }
OFrndint *OFrndint::clone() const {
  return new OFrndint(*this);
}

/********************   OFscale    ********************/
OFscale::OFscale() { }
OFscale::OFscale(const OFscale & other) { 
}
OFscale &OFscale::operator=(const OFscale & other) {
  OFscale tmp(other);
  swap(tmp);
  return *this;
}
void OFscale::swap(OFscale & other) {

}

OFscale::~OFscale() { }

void OFscale::accept(Visitor *v) { v->visitOFscale(this); }
OFscale *OFscale::clone() const {
  return new OFscale(*this);
}

/********************   OFtxmo    ********************/
OFtxmo::OFtxmo() { }
OFtxmo::OFtxmo(const OFtxmo & other) { 
}
OFtxmo &OFtxmo::operator=(const OFtxmo & other) {
  OFtxmo tmp(other);
  swap(tmp);
  return *this;
}
void OFtxmo::swap(OFtxmo & other) {

}

OFtxmo::~OFtxmo() { }

void OFtxmo::accept(Visitor *v) { v->visitOFtxmo(this); }
OFtxmo *OFtxmo::clone() const {
  return new OFtxmo(*this);
}

/********************   OFyltx    ********************/
OFyltx::OFyltx() { }
OFyltx::OFyltx(const OFyltx & other) { 
}
OFyltx &OFyltx::operator=(const OFyltx & other) {
  OFyltx tmp(other);
  swap(tmp);
  return *this;
}
void OFyltx::swap(OFyltx & other) {

}

OFyltx::~OFyltx() { }

void OFyltx::accept(Visitor *v) { v->visitOFyltx(this); }
OFyltx *OFyltx::clone() const {
  return new OFyltx(*this);
}

/********************   OFyltxpo    ********************/
OFyltxpo::OFyltxpo() { }
OFyltxpo::OFyltxpo(const OFyltxpo & other) { 
}
OFyltxpo &OFyltxpo::operator=(const OFyltxpo & other) {
  OFyltxpo tmp(other);
  swap(tmp);
  return *this;
}
void OFyltxpo::swap(OFyltxpo & other) {

}

OFyltxpo::~OFyltxpo() { }

void OFyltxpo::accept(Visitor *v) { v->visitOFyltxpo(this); }
OFyltxpo *OFyltxpo::clone() const {
  return new OFyltxpo(*this);
}

/********************   OFcomi    ********************/
OFcomi::OFcomi() { }
OFcomi::OFcomi(const OFcomi & other) { 
}
OFcomi &OFcomi::operator=(const OFcomi & other) {
  OFcomi tmp(other);
  swap(tmp);
  return *this;
}
void OFcomi::swap(OFcomi & other) {

}

OFcomi::~OFcomi() { }

void OFcomi::accept(Visitor *v) { v->visitOFcomi(this); }
OFcomi *OFcomi::clone() const {
  return new OFcomi(*this);
}

/********************   OFcmovb    ********************/
OFcmovb::OFcmovb() { }
OFcmovb::OFcmovb(const OFcmovb & other) { 
}
OFcmovb &OFcmovb::operator=(const OFcmovb & other) {
  OFcmovb tmp(other);
  swap(tmp);
  return *this;
}
void OFcmovb::swap(OFcmovb & other) {

}

OFcmovb::~OFcmovb() { }

void OFcmovb::accept(Visitor *v) { v->visitOFcmovb(this); }
OFcmovb *OFcmovb::clone() const {
  return new OFcmovb(*this);
}

/********************   OFcmovbe    ********************/
OFcmovbe::OFcmovbe() { }
OFcmovbe::OFcmovbe(const OFcmovbe & other) { 
}
OFcmovbe &OFcmovbe::operator=(const OFcmovbe & other) {
  OFcmovbe tmp(other);
  swap(tmp);
  return *this;
}
void OFcmovbe::swap(OFcmovbe & other) {

}

OFcmovbe::~OFcmovbe() { }

void OFcmovbe::accept(Visitor *v) { v->visitOFcmovbe(this); }
OFcmovbe *OFcmovbe::clone() const {
  return new OFcmovbe(*this);
}

/********************   OFcmove    ********************/
OFcmove::OFcmove() { }
OFcmove::OFcmove(const OFcmove & other) { 
}
OFcmove &OFcmove::operator=(const OFcmove & other) {
  OFcmove tmp(other);
  swap(tmp);
  return *this;
}
void OFcmove::swap(OFcmove & other) {

}

OFcmove::~OFcmove() { }

void OFcmove::accept(Visitor *v) { v->visitOFcmove(this); }
OFcmove *OFcmove::clone() const {
  return new OFcmove(*this);
}

/********************   OFcmovnb    ********************/
OFcmovnb::OFcmovnb() { }
OFcmovnb::OFcmovnb(const OFcmovnb & other) { 
}
OFcmovnb &OFcmovnb::operator=(const OFcmovnb & other) {
  OFcmovnb tmp(other);
  swap(tmp);
  return *this;
}
void OFcmovnb::swap(OFcmovnb & other) {

}

OFcmovnb::~OFcmovnb() { }

void OFcmovnb::accept(Visitor *v) { v->visitOFcmovnb(this); }
OFcmovnb *OFcmovnb::clone() const {
  return new OFcmovnb(*this);
}

/********************   OFcmovnbe    ********************/
OFcmovnbe::OFcmovnbe() { }
OFcmovnbe::OFcmovnbe(const OFcmovnbe & other) { 
}
OFcmovnbe &OFcmovnbe::operator=(const OFcmovnbe & other) {
  OFcmovnbe tmp(other);
  swap(tmp);
  return *this;
}
void OFcmovnbe::swap(OFcmovnbe & other) {

}

OFcmovnbe::~OFcmovnbe() { }

void OFcmovnbe::accept(Visitor *v) { v->visitOFcmovnbe(this); }
OFcmovnbe *OFcmovnbe::clone() const {
  return new OFcmovnbe(*this);
}

/********************   OFcmovne    ********************/
OFcmovne::OFcmovne() { }
OFcmovne::OFcmovne(const OFcmovne & other) { 
}
OFcmovne &OFcmovne::operator=(const OFcmovne & other) {
  OFcmovne tmp(other);
  swap(tmp);
  return *this;
}
void OFcmovne::swap(OFcmovne & other) {

}

OFcmovne::~OFcmovne() { }

void OFcmovne::accept(Visitor *v) { v->visitOFcmovne(this); }
OFcmovne *OFcmovne::clone() const {
  return new OFcmovne(*this);
}

/********************   OFcmovnu    ********************/
OFcmovnu::OFcmovnu() { }
OFcmovnu::OFcmovnu(const OFcmovnu & other) { 
}
OFcmovnu &OFcmovnu::operator=(const OFcmovnu & other) {
  OFcmovnu tmp(other);
  swap(tmp);
  return *this;
}
void OFcmovnu::swap(OFcmovnu & other) {

}

OFcmovnu::~OFcmovnu() { }

void OFcmovnu::accept(Visitor *v) { v->visitOFcmovnu(this); }
OFcmovnu *OFcmovnu::clone() const {
  return new OFcmovnu(*this);
}

/********************   OFcmovu    ********************/
OFcmovu::OFcmovu() { }
OFcmovu::OFcmovu(const OFcmovu & other) { 
}
OFcmovu &OFcmovu::operator=(const OFcmovu & other) {
  OFcmovu tmp(other);
  swap(tmp);
  return *this;
}
void OFcmovu::swap(OFcmovu & other) {

}

OFcmovu::~OFcmovu() { }

void OFcmovu::accept(Visitor *v) { v->visitOFcmovu(this); }
OFcmovu *OFcmovu::clone() const {
  return new OFcmovu(*this);
}

/********************   OFld    ********************/
OFld::OFld(Operand *p1) { operand_ = p1; }
OFld::OFld(const OFld & other) {   operand_ = other.operand_->clone();

}
OFld &OFld::operator=(const OFld & other) {
  OFld tmp(other);
  swap(tmp);
  return *this;
}
void OFld::swap(OFld & other) {
  std::swap(operand_, other.operand_);

}

OFld::~OFld() { delete(operand_); }

void OFld::accept(Visitor *v) { v->visitOFld(this); }
OFld *OFld::clone() const {
  return new OFld(*this);
}

/********************   OFild    ********************/
OFild::OFild(Operand *p1) { operand_ = p1; }
OFild::OFild(const OFild & other) {   operand_ = other.operand_->clone();

}
OFild &OFild::operator=(const OFild & other) {
  OFild tmp(other);
  swap(tmp);
  return *this;
}
void OFild::swap(OFild & other) {
  std::swap(operand_, other.operand_);

}

OFild::~OFild() { delete(operand_); }

void OFild::accept(Visitor *v) { v->visitOFild(this); }
OFild *OFild::clone() const {
  return new OFild(*this);
}

/********************   OFldt    ********************/
OFldt::OFldt() { }
OFldt::OFldt(const OFldt & other) { 
}
OFldt &OFldt::operator=(const OFldt & other) {
  OFldt tmp(other);
  swap(tmp);
  return *this;
}
void OFldt::swap(OFldt & other) {

}

OFldt::~OFldt() { }

void OFldt::accept(Visitor *v) { v->visitOFldt(this); }
OFldt *OFldt::clone() const {
  return new OFldt(*this);
}

/********************   OFldn    ********************/
OFldn::OFldn() { }
OFldn::OFldn(const OFldn & other) { 
}
OFldn &OFldn::operator=(const OFldn & other) {
  OFldn tmp(other);
  swap(tmp);
  return *this;
}
void OFldn::swap(OFldn & other) {

}

OFldn::~OFldn() { }

void OFldn::accept(Visitor *v) { v->visitOFldn(this); }
OFldn *OFldn::clone() const {
  return new OFldn(*this);
}

/********************   OFldz    ********************/
OFldz::OFldz() { }
OFldz::OFldz(const OFldz & other) { 
}
OFldz &OFldz::operator=(const OFldz & other) {
  OFldz tmp(other);
  swap(tmp);
  return *this;
}
void OFldz::swap(OFldz & other) {

}

OFldz::~OFldz() { }

void OFldz::accept(Visitor *v) { v->visitOFldz(this); }
OFldz *OFldz::clone() const {
  return new OFldz(*this);
}

/********************   OFldo    ********************/
OFldo::OFldo() { }
OFldo::OFldo(const OFldo & other) { 
}
OFldo &OFldo::operator=(const OFldo & other) {
  OFldo tmp(other);
  swap(tmp);
  return *this;
}
void OFldo::swap(OFldo & other) {

}

OFldo::~OFldo() { }

void OFldo::accept(Visitor *v) { v->visitOFldo(this); }
OFldo *OFldo::clone() const {
  return new OFldo(*this);
}

/********************   OFldpi    ********************/
OFldpi::OFldpi() { }
OFldpi::OFldpi(const OFldpi & other) { 
}
OFldpi &OFldpi::operator=(const OFldpi & other) {
  OFldpi tmp(other);
  swap(tmp);
  return *this;
}
void OFldpi::swap(OFldpi & other) {

}

OFldpi::~OFldpi() { }

void OFldpi::accept(Visitor *v) { v->visitOFldpi(this); }
OFldpi *OFldpi::clone() const {
  return new OFldpi(*this);
}

/********************   OFldlte    ********************/
OFldlte::OFldlte() { }
OFldlte::OFldlte(const OFldlte & other) { 
}
OFldlte &OFldlte::operator=(const OFldlte & other) {
  OFldlte tmp(other);
  swap(tmp);
  return *this;
}
void OFldlte::swap(OFldlte & other) {

}

OFldlte::~OFldlte() { }

void OFldlte::accept(Visitor *v) { v->visitOFldlte(this); }
OFldlte *OFldlte::clone() const {
  return new OFldlte(*this);
}

/********************   OFldlnt    ********************/
OFldlnt::OFldlnt() { }
OFldlnt::OFldlnt(const OFldlnt & other) { 
}
OFldlnt &OFldlnt::operator=(const OFldlnt & other) {
  OFldlnt tmp(other);
  swap(tmp);
  return *this;
}
void OFldlnt::swap(OFldlnt & other) {

}

OFldlnt::~OFldlnt() { }

void OFldlnt::accept(Visitor *v) { v->visitOFldlnt(this); }
OFldlnt *OFldlnt::clone() const {
  return new OFldlnt(*this);
}

/********************   OFldlgt    ********************/
OFldlgt::OFldlgt() { }
OFldlgt::OFldlgt(const OFldlgt & other) { 
}
OFldlgt &OFldlgt::operator=(const OFldlgt & other) {
  OFldlgt tmp(other);
  swap(tmp);
  return *this;
}
void OFldlgt::swap(OFldlgt & other) {

}

OFldlgt::~OFldlgt() { }

void OFldlgt::accept(Visitor *v) { v->visitOFldlgt(this); }
OFldlgt *OFldlgt::clone() const {
  return new OFldlgt(*this);
}

/********************   OFst    ********************/
OFst::OFst(Operand *p1) { operand_ = p1; }
OFst::OFst(const OFst & other) {   operand_ = other.operand_->clone();

}
OFst &OFst::operator=(const OFst & other) {
  OFst tmp(other);
  swap(tmp);
  return *this;
}
void OFst::swap(OFst & other) {
  std::swap(operand_, other.operand_);

}

OFst::~OFst() { delete(operand_); }

void OFst::accept(Visitor *v) { v->visitOFst(this); }
OFst *OFst::clone() const {
  return new OFst(*this);
}

/********************   OFist    ********************/
OFist::OFist(Operand *p1) { operand_ = p1; }
OFist::OFist(const OFist & other) {   operand_ = other.operand_->clone();

}
OFist &OFist::operator=(const OFist & other) {
  OFist tmp(other);
  swap(tmp);
  return *this;
}
void OFist::swap(OFist & other) {
  std::swap(operand_, other.operand_);

}

OFist::~OFist() { delete(operand_); }

void OFist::accept(Visitor *v) { v->visitOFist(this); }
OFist *OFist::clone() const {
  return new OFist(*this);
}

/********************   OFstp    ********************/
OFstp::OFstp(Operand *p1) { operand_ = p1; }
OFstp::OFstp(const OFstp & other) {   operand_ = other.operand_->clone();

}
OFstp &OFstp::operator=(const OFstp & other) {
  OFstp tmp(other);
  swap(tmp);
  return *this;
}
void OFstp::swap(OFstp & other) {
  std::swap(operand_, other.operand_);

}

OFstp::~OFstp() { delete(operand_); }

void OFstp::accept(Visitor *v) { v->visitOFstp(this); }
OFstp *OFstp::clone() const {
  return new OFstp(*this);
}

/********************   OFistp    ********************/
OFistp::OFistp(Operand *p1) { operand_ = p1; }
OFistp::OFistp(const OFistp & other) {   operand_ = other.operand_->clone();

}
OFistp &OFistp::operator=(const OFistp & other) {
  OFistp tmp(other);
  swap(tmp);
  return *this;
}
void OFistp::swap(OFistp & other) {
  std::swap(operand_, other.operand_);

}

OFistp::~OFistp() { delete(operand_); }

void OFistp::accept(Visitor *v) { v->visitOFistp(this); }
OFistp *OFistp::clone() const {
  return new OFistp(*this);
}

/********************   OFstpt    ********************/
OFstpt::OFstpt() { }
OFstpt::OFstpt(const OFstpt & other) { 
}
OFstpt &OFstpt::operator=(const OFstpt & other) {
  OFstpt tmp(other);
  swap(tmp);
  return *this;
}
void OFstpt::swap(OFstpt & other) {

}

OFstpt::~OFstpt() { }

void OFstpt::accept(Visitor *v) { v->visitOFstpt(this); }
OFstpt *OFstpt::clone() const {
  return new OFstpt(*this);
}

/********************   OFfree    ********************/
OFfree::OFfree() { }
OFfree::OFfree(const OFfree & other) { 
}
OFfree &OFfree::operator=(const OFfree & other) {
  OFfree tmp(other);
  swap(tmp);
  return *this;
}
void OFfree::swap(OFfree & other) {

}

OFfree::~OFfree() { }

void OFfree::accept(Visitor *v) { v->visitOFfree(this); }
OFfree *OFfree::clone() const {
  return new OFfree(*this);
}

/********************   OFfreea    ********************/
OFfreea::OFfreea() { }
OFfreea::OFfreea(const OFfreea & other) { 
}
OFfreea &OFfreea::operator=(const OFfreea & other) {
  OFfreea tmp(other);
  swap(tmp);
  return *this;
}
void OFfreea::swap(OFfreea & other) {

}

OFfreea::~OFfreea() { }

void OFfreea::accept(Visitor *v) { v->visitOFfreea(this); }
OFfreea *OFfreea::clone() const {
  return new OFfreea(*this);
}

/********************   OFfreeb    ********************/
OFfreeb::OFfreeb() { }
OFfreeb::OFfreeb(const OFfreeb & other) { 
}
OFfreeb &OFfreeb::operator=(const OFfreeb & other) {
  OFfreeb tmp(other);
  swap(tmp);
  return *this;
}
void OFfreeb::swap(OFfreeb & other) {

}

OFfreeb::~OFfreeb() { }

void OFfreeb::accept(Visitor *v) { v->visitOFfreeb(this); }
OFfreeb *OFfreeb::clone() const {
  return new OFfreeb(*this);
}

/********************   OFfreec    ********************/
OFfreec::OFfreec() { }
OFfreec::OFfreec(const OFfreec & other) { 
}
OFfreec &OFfreec::operator=(const OFfreec & other) {
  OFfreec tmp(other);
  swap(tmp);
  return *this;
}
void OFfreec::swap(OFfreec & other) {

}

OFfreec::~OFfreec() { }

void OFfreec::accept(Visitor *v) { v->visitOFfreec(this); }
OFfreec *OFfreec::clone() const {
  return new OFfreec(*this);
}

/********************   OFfreed    ********************/
OFfreed::OFfreed() { }
OFfreed::OFfreed(const OFfreed & other) { 
}
OFfreed &OFfreed::operator=(const OFfreed & other) {
  OFfreed tmp(other);
  swap(tmp);
  return *this;
}
void OFfreed::swap(OFfreed & other) {

}

OFfreed::~OFfreed() { }

void OFfreed::accept(Visitor *v) { v->visitOFfreed(this); }
OFfreed *OFfreed::clone() const {
  return new OFfreed(*this);
}

/********************   OFfreee    ********************/
OFfreee::OFfreee() { }
OFfreee::OFfreee(const OFfreee & other) { 
}
OFfreee &OFfreee::operator=(const OFfreee & other) {
  OFfreee tmp(other);
  swap(tmp);
  return *this;
}
void OFfreee::swap(OFfreee & other) {

}

OFfreee::~OFfreee() { }

void OFfreee::accept(Visitor *v) { v->visitOFfreee(this); }
OFfreee *OFfreee::clone() const {
  return new OFfreee(*this);
}

/********************   OFfreef    ********************/
OFfreef::OFfreef() { }
OFfreef::OFfreef(const OFfreef & other) { 
}
OFfreef &OFfreef::operator=(const OFfreef & other) {
  OFfreef tmp(other);
  swap(tmp);
  return *this;
}
void OFfreef::swap(OFfreef & other) {

}

OFfreef::~OFfreef() { }

void OFfreef::accept(Visitor *v) { v->visitOFfreef(this); }
OFfreef *OFfreef::clone() const {
  return new OFfreef(*this);
}

/********************   OFfreeg    ********************/
OFfreeg::OFfreeg() { }
OFfreeg::OFfreeg(const OFfreeg & other) { 
}
OFfreeg &OFfreeg::operator=(const OFfreeg & other) {
  OFfreeg tmp(other);
  swap(tmp);
  return *this;
}
void OFfreeg::swap(OFfreeg & other) {

}

OFfreeg::~OFfreeg() { }

void OFfreeg::accept(Visitor *v) { v->visitOFfreeg(this); }
OFfreeg *OFfreeg::clone() const {
  return new OFfreeg(*this);
}

/********************   OFxchg    ********************/
OFxchg::OFxchg() { }
OFxchg::OFxchg(const OFxchg & other) { 
}
OFxchg &OFxchg::operator=(const OFxchg & other) {
  OFxchg tmp(other);
  swap(tmp);
  return *this;
}
void OFxchg::swap(OFxchg & other) {

}

OFxchg::~OFxchg() { }

void OFxchg::accept(Visitor *v) { v->visitOFxchg(this); }
OFxchg *OFxchg::clone() const {
  return new OFxchg(*this);
}

/********************   OFincstp    ********************/
OFincstp::OFincstp() { }
OFincstp::OFincstp(const OFincstp & other) { 
}
OFincstp &OFincstp::operator=(const OFincstp & other) {
  OFincstp tmp(other);
  swap(tmp);
  return *this;
}
void OFincstp::swap(OFincstp & other) {

}

OFincstp::~OFincstp() { }

void OFincstp::accept(Visitor *v) { v->visitOFincstp(this); }
OFincstp *OFincstp::clone() const {
  return new OFincstp(*this);
}

/********************   OFdecstp    ********************/
OFdecstp::OFdecstp() { }
OFdecstp::OFdecstp(const OFdecstp & other) { 
}
OFdecstp &OFdecstp::operator=(const OFdecstp & other) {
  OFdecstp tmp(other);
  swap(tmp);
  return *this;
}
void OFdecstp::swap(OFdecstp & other) {

}

OFdecstp::~OFdecstp() { }

void OFdecstp::accept(Visitor *v) { v->visitOFdecstp(this); }
OFdecstp *OFdecstp::clone() const {
  return new OFdecstp(*this);
}

/********************   REax    ********************/
REax::REax() { }
REax::REax(const REax & other) { 
}
REax &REax::operator=(const REax & other) {
  REax tmp(other);
  swap(tmp);
  return *this;
}
void REax::swap(REax & other) {

}

REax::~REax() { }

void REax::accept(Visitor *v) { v->visitREax(this); }
REax *REax::clone() const {
  return new REax(*this);
}

/********************   REcx    ********************/
REcx::REcx() { }
REcx::REcx(const REcx & other) { 
}
REcx &REcx::operator=(const REcx & other) {
  REcx tmp(other);
  swap(tmp);
  return *this;
}
void REcx::swap(REcx & other) {

}

REcx::~REcx() { }

void REcx::accept(Visitor *v) { v->visitREcx(this); }
REcx *REcx::clone() const {
  return new REcx(*this);
}

/********************   REdx    ********************/
REdx::REdx() { }
REdx::REdx(const REdx & other) { 
}
REdx &REdx::operator=(const REdx & other) {
  REdx tmp(other);
  swap(tmp);
  return *this;
}
void REdx::swap(REdx & other) {

}

REdx::~REdx() { }

void REdx::accept(Visitor *v) { v->visitREdx(this); }
REdx *REdx::clone() const {
  return new REdx(*this);
}

/********************   REbx    ********************/
REbx::REbx() { }
REbx::REbx(const REbx & other) { 
}
REbx &REbx::operator=(const REbx & other) {
  REbx tmp(other);
  swap(tmp);
  return *this;
}
void REbx::swap(REbx & other) {

}

REbx::~REbx() { }

void REbx::accept(Visitor *v) { v->visitREbx(this); }
REbx *REbx::clone() const {
  return new REbx(*this);
}

/********************   REsp    ********************/
REsp::REsp() { }
REsp::REsp(const REsp & other) { 
}
REsp &REsp::operator=(const REsp & other) {
  REsp tmp(other);
  swap(tmp);
  return *this;
}
void REsp::swap(REsp & other) {

}

REsp::~REsp() { }

void REsp::accept(Visitor *v) { v->visitREsp(this); }
REsp *REsp::clone() const {
  return new REsp(*this);
}

/********************   REbp    ********************/
REbp::REbp() { }
REbp::REbp(const REbp & other) { 
}
REbp &REbp::operator=(const REbp & other) {
  REbp tmp(other);
  swap(tmp);
  return *this;
}
void REbp::swap(REbp & other) {

}

REbp::~REbp() { }

void REbp::accept(Visitor *v) { v->visitREbp(this); }
REbp *REbp::clone() const {
  return new REbp(*this);
}

/********************   REsi    ********************/
REsi::REsi() { }
REsi::REsi(const REsi & other) { 
}
REsi &REsi::operator=(const REsi & other) {
  REsi tmp(other);
  swap(tmp);
  return *this;
}
void REsi::swap(REsi & other) {

}

REsi::~REsi() { }

void REsi::accept(Visitor *v) { v->visitREsi(this); }
REsi *REsi::clone() const {
  return new REsi(*this);
}

/********************   REdi    ********************/
REdi::REdi() { }
REdi::REdi(const REdi & other) { 
}
REdi &REdi::operator=(const REdi & other) {
  REdi tmp(other);
  swap(tmp);
  return *this;
}
void REdi::swap(REdi & other) {

}

REdi::~REdi() { }

void REdi::accept(Visitor *v) { v->visitREdi(this); }
REdi *REdi::clone() const {
  return new REdi(*this);
}

/********************   OReg    ********************/
OReg::OReg(Register *p1) { register_ = p1; }
OReg::OReg(const OReg & other) {   register_ = other.register_->clone();

}
OReg &OReg::operator=(const OReg & other) {
  OReg tmp(other);
  swap(tmp);
  return *this;
}
void OReg::swap(OReg & other) {
  std::swap(register_, other.register_);

}

OReg::~OReg() { delete(register_); }

void OReg::accept(Visitor *v) { v->visitOReg(this); }
OReg *OReg::clone() const {
  return new OReg(*this);
}

/********************   OHex    ********************/
OHex::OHex(HexConstant p1) { hexconstant_ = p1; }
OHex::OHex(const OHex & other) {   hexconstant_ = other.hexconstant_;

}
OHex &OHex::operator=(const OHex & other) {
  OHex tmp(other);
  swap(tmp);
  return *this;
}
void OHex::swap(OHex & other) {
  std::swap(hexconstant_, other.hexconstant_);

}

OHex::~OHex() { }

void OHex::accept(Visitor *v) { v->visitOHex(this); }
OHex *OHex::clone() const {
  return new OHex(*this);
}

/********************   OLab    ********************/
OLab::OLab(Ident p1) { ident_ = p1; }
OLab::OLab(const OLab & other) {   ident_ = other.ident_;

}
OLab &OLab::operator=(const OLab & other) {
  OLab tmp(other);
  swap(tmp);
  return *this;
}
void OLab::swap(OLab & other) {
  std::swap(ident_, other.ident_);

}

OLab::~OLab() { }

void OLab::accept(Visitor *v) { v->visitOLab(this); }
OLab *OLab::clone() const {
  return new OLab(*this);
}

/********************   OLitAdd    ********************/
OLitAdd::OLitAdd(HexConstant p1) { hexconstant_ = p1; }
OLitAdd::OLitAdd(const OLitAdd & other) {   hexconstant_ = other.hexconstant_;

}
OLitAdd &OLitAdd::operator=(const OLitAdd & other) {
  OLitAdd tmp(other);
  swap(tmp);
  return *this;
}
void OLitAdd::swap(OLitAdd & other) {
  std::swap(hexconstant_, other.hexconstant_);

}

OLitAdd::~OLitAdd() { }

void OLitAdd::accept(Visitor *v) { v->visitOLitAdd(this); }
OLitAdd *OLitAdd::clone() const {
  return new OLitAdd(*this);
}

/********************   ORegAdd    ********************/
ORegAdd::ORegAdd(Register *p1) { register_ = p1; }
ORegAdd::ORegAdd(const ORegAdd & other) {   register_ = other.register_->clone();

}
ORegAdd &ORegAdd::operator=(const ORegAdd & other) {
  ORegAdd tmp(other);
  swap(tmp);
  return *this;
}
void ORegAdd::swap(ORegAdd & other) {
  std::swap(register_, other.register_);

}

ORegAdd::~ORegAdd() { delete(register_); }

void ORegAdd::accept(Visitor *v) { v->visitORegAdd(this); }
ORegAdd *ORegAdd::clone() const {
  return new ORegAdd(*this);
}

/********************   ORelAddP    ********************/
ORelAddP::ORelAddP(Register *p1, Integer p2) { register_ = p1; integer_ = p2; }
ORelAddP::ORelAddP(const ORelAddP & other) {   register_ = other.register_->clone();
  integer_ = other.integer_;

}
ORelAddP &ORelAddP::operator=(const ORelAddP & other) {
  ORelAddP tmp(other);
  swap(tmp);
  return *this;
}
void ORelAddP::swap(ORelAddP & other) {
  std::swap(register_, other.register_);
  std::swap(integer_, other.integer_);

}

ORelAddP::~ORelAddP() { delete(register_); }

void ORelAddP::accept(Visitor *v) { v->visitORelAddP(this); }
ORelAddP *ORelAddP::clone() const {
  return new ORelAddP(*this);
}

/********************   ORelAddS    ********************/
ORelAddS::ORelAddS(Register *p1, Integer p2) { register_ = p1; integer_ = p2; }
ORelAddS::ORelAddS(const ORelAddS & other) {   register_ = other.register_->clone();
  integer_ = other.integer_;

}
ORelAddS &ORelAddS::operator=(const ORelAddS & other) {
  ORelAddS tmp(other);
  swap(tmp);
  return *this;
}
void ORelAddS::swap(ORelAddS & other) {
  std::swap(register_, other.register_);
  std::swap(integer_, other.integer_);

}

ORelAddS::~ORelAddS() { delete(register_); }

void ORelAddS::accept(Visitor *v) { v->visitORelAddS(this); }
ORelAddS *ORelAddS::clone() const {
  return new ORelAddS(*this);
}


