#summary Describes the grammar of FridgeScript.
#labels Phase-Design,Phase-Implementation

= Introduction =

This page duplicates information found in DocFridgeScript.html in the source repository. The information in DocFridgeScript.html is generated by the same tool that generates the lexer and parser for FridgeScript, so it should always be trusted over the contents of this page.


= The lexical structure of FridgeScript =

Identifiers
Identifiers Ident are unquoted strings beginning with a letter, followed by any combination of letters, digits, and the characters _ ' reserved words excluded. 

== Literals ==

Double-precision float literals Double have the structure indicated by the regular expression digit+ '.' digit+ ('e' ('-')? digit+)? i.e.\ two sequences of digits separated by a decimal point, optionally followed by an unsigned or negative exponent. 

Integer literals Integer are nonempty sequences of digits. 

== Reserved words and symbols ==

The set of reserved words is the set of terminals appearing in the grammar. Those reserved words that consist of non-letter characters are called symbols, and they are treated in a different way from those that are similar to identifiers. The lexer follows rules familiar from languages like Haskell, C, and Java, including longest match and spacing conventions. 

The reserved words used in FridgeScript are the following: 

|| acos || asin || atan || atan2 ||
|| break || continue || cos || else ||
|| exp || for || if || log ||
|| log10 || pi || pow || return ||
|| sin || sqrt || tan || until ||
|| while ||  


The symbols used in FridgeScript are the following: 

|| ( || ) || { || } ||
|| , || ; || ++ || -- ||
|| ! || - || ~ || + ||
|| * || / || % || << ||
|| >> || < || > || <= ||
|| >= || == || != || & ||
|| | || ^ || && || | | ||
|| ^^ || ? || : || = ||
|| += || -= || *= || /= ||
|| %= || &= || |= || ^= ||
|| <<= || >>=  ||


== Comments ==

Single-line comments begin with //.
Multiple-line comments are enclosed with /* and */. 

= The syntactic structure of FridgeScript =

Non-terminals are enclosed between < and >. The symbols -> (production), | (union) and eps (empty rule) belong to the BNF notation. All other symbols are terminals. 

Program -> [Block] 
Block -> [Function] 
 | [Statement] 
Function -> Ident ( [Parameter] ) { [Statement] } 
Parameter -> Ident 
[Block] -> eps 
 | Block [Block] 
[Function] -> Function 
 | Function [Function] 
[Statement] -> Statement 
 | Statement [Statement] 
[Parameter] -> Parameter 
 | Parameter , [Parameter] 
Statement -> Expression ; 
 | { [Statement] } 
 | return Expression ; 
 | if ( Expression ) Statement 
 | if ( Expression ) Statement else Statement 
 | while ( Expression ) Statement 
 | until ( Expression ) Statement 
 | for ( Expression ; Expression ; Expression ) Statement 
 | break ; 
 | continue ; 
Expression12 -> Double 
 | Integer 
 | Ident 
 | pi 
 | ( Expression ) 
Expression11 -> Ident ( [Expression] ) 
 | Ident ++ 
 | Ident -- 
 | pow ( Expression , Expression ) 
 | sqrt ( Expression ) 
 | exp ( Expression ) 
 | log ( Expression ) 
 | log10 ( Expression ) 
 | sin ( Expression ) 
 | cos ( Expression ) 
 | tan ( Expression ) 
 | atan ( Expression ) 
 | atan2 ( Expression , Expression ) 
 | asin ( Expression ) 
 | acos ( Expression ) 
 | Expression12 
Expression10 -> ! Expression 
 | ++ Ident 
 | -- Ident 
 | - Expression 
 | ~ Expression 
 | + Expression 
 | Expression11 
Expression9 -> Expression * Expression 
 | Expression / Expression 
 | Expression % Expression 
 | Expression10 
Expression8 -> Expression + Expression 
 | Expression - Expression 
 | Expression9 
Expression7 -> Expression << Expression 
 | Expression >> Expression 
 | Expression8 
Expression6 -> Expression < Expression 
 | Expression > Expression 
 | Expression <= Expression 
 | Expression >= Expression 
 | Expression7 
Expression5 -> Expression == Expression 
 | Expression != Expression 
 | Expression6 
Expression4 -> Expression & Expression 
 | Expression | Expression 
 | Expression ^ Expression 
 | Expression5 
Expression3 -> Expression && Expression 
 | Expression || Expression 
 | Expression ^^ Expression 
 | Expression4 
Expression2 -> Expression ? Expression : Expression 
 | Expression3 
Expression1 -> Ident = Expression 
 | Ident += Expression 
 | Ident -= Expression 
 | Ident *= Expression 
 | Ident /= Expression 
 | Ident %= Expression 
 | Ident &= Expression 
 | Ident |= Expression 
 | Ident ^= Expression 
 | Ident <<= Expression 
 | Ident >>= Expression 
 | Expression2 
Expression -> Expression1 
[Expression] -> eps 
 | Expression 
 | Expression , [Expression] 